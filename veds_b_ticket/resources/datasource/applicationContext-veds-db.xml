<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:rep="http://www.springframework.org/schema/data/repository"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/data/repository http://www.springframework.org/schema/data/repository/spring-repository.xsd"
	default-lazy-init="false">
	<bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="SQL Server">sqlserver</prop>  
                <prop key="DB2">db2</prop>  
                <prop key="TimesTen">timesten</prop>
                <prop key="Oracle">oracle</prop>  
                <prop key="MySQL">mysql</prop>  
                <prop key="EnterpriseDB">postgres</prop>
			</props>
		</property>
	</bean>
	<bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">  
         <property name="properties" ref="vendorProperties"/>  
    </bean>  
	<!-- Jpa Entity Manager 配置 -->
	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="cn.vetech.vedsb.common" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" />
		<property name="plugins">
			<array>
				<bean class="org.vetech.core.modules.mybatis.page.PagePlugin">
				</bean>
				<bean class="org.vetech.core.modules.mybatis.shard.ShardDBPlugin">
				</bean>
			</array>
		</property>
		<property name="databaseIdProvider" ref="databaseIdProvider"/>
	</bean>


	<bean id="jpSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="jpDataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="cn.vetech.vedsb.jp" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mybatis/*Jp.xml" />
		<property name="plugins">
			<array>
				<bean class="org.vetech.core.modules.mybatis.page.PagePlugin"></bean>
				<bean class="org.vetech.core.modules.mybatis.shard.ShardDBPlugin"></bean>
			</array>
		</property>
		<property name="databaseIdProvider" ref="databaseIdProvider"/>
	</bean>
	
	 <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.vetech.vedsb.jp.dao" />
		<property name="sqlSessionFactoryBeanName" value="jpSqlSessionFactory"></property>
		<property name="annotationClass" value="cn.vetech.vedsb.jp.dao.JpMyBatisRepository" />
	</bean>
		
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.vetech.vedsb.common.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>

	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<bean id="sqlSessionJp" class="org.mybatis.spring.SqlSessionTemplate"  scope="prototype">
		<constructor-arg index="0" ref="jpSqlSessionFactory" />
	</bean>
		
	<bean class="org.vetech.core.modules.mybatis.mapperhelper.MapperHelper"
		depends-on="sqlSession" init-method="initMapper" scope="singleton"
		lazy-init="false">
		<property name="mappers">
			<array>
				<value>org.vetech.core.modules.mybatis.mapper.Mapper</value>
			</array>
		</property>
		<property name="sqlSessions">
			<array>
				<ref bean="sqlSession"></ref>
				<ref bean="sqlSessionJp"></ref>
			</array>
		</property>
		<property name="mapUnderscoreToCamelCase" value="true"/>
	</bean>

	<!-- 事务管理器配置, Jpa单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="jptransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="jpDataSource" />
	</bean>
	<!-- 数据源配置,使用应用内的Tomcat JDBC连接池 -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
		<property name="minIdle" value="0" />
		<property name="testOnBorrow" value="true" /><!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnReturn" value="true" /><!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<!-- 建议配置为true，不影响性能，并且保证安全性。
			申请连接的时候检测，如果空闲时间大于
			timeBetweenEvictionRunsMillis，
			执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<property name="validationQuery" value="select count(*) from dual" />
		
		<property name="defaultAutoCommit" value="false" />
		<!-- 连接Idle10分钟后超时，每1分钟检查一次 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="600000" />
	</bean>
	<!--
	<bean id="dynamicdataSource" class="org.vetech.core.modules.datasource.TomcatPoolDynamicDataSource" init-method="init">
		<property name="defaultDataSource" ref="dataSource" />
		<property name="targetDataSources">
		<map></map>
		</property>
	</bean>
		<bean id="dynTransationDataSource" class="org.vetech.core.modules.datasource.DataSourceAspect"  />  
	 -->
	<tx:annotation-driven transaction-manager="jptransactionManager"
		proxy-target-class="true" />
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	

	<bean id="jpDataSource" class="org.apache.tomcat.jdbc.pool.DataSource"  destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jp.jdbc.driver}" />
		<property name="url" value="${jp.jdbc.url}" />
		<property name="username" value="${jp.jdbc.username}" />
		<property name="password" value="${jp.jdbc.password}" />
		<property name="maxActive" value="${jp.jdbc.pool.maxActive}" />
		<property name="maxIdle" value="${jp.jdbc.pool.maxIdle}" />
		<property name="minIdle" value="0" />
		<property name="testOnBorrow" value="true" /><!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnReturn" value="true" /><!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<!-- 建议配置为true，不影响性能，并且保证安全性。
			申请连接的时候检测，如果空闲时间大于
			timeBetweenEvictionRunsMillis，
			执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<property name="validationQuery" value="select count(*) from dual" />
		
		<property name="defaultAutoCommit" value="false" />
		<!-- 连接Idle10分钟后超时，每1分钟检查一次 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="600000" />
	</bean>
	
	<!-- quartz使用的数据源配置 -->
	<bean id="quartzDataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<property name="driverClassName" value="${quartz.jdbc.driver}" />
		<property name="url" value="${quartz.jdbc.url}" />
		<property name="username" value="${quartz.jdbc.username}" />
		<property name="password" value="${quartz.jdbc.password}" />
		<property name="maxActive" value="${quartz.jdbc.pool.maxActive}" />
		<property name="maxIdle" value="${quartz.jdbc.pool.maxIdle}" />
		<property name="minIdle" value="0" />
		<property name="defaultAutoCommit" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="600000" />
		
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="testWhileIdle" value="true" />
		<property name="validationQuery" value="select count(*)" />			
	</bean>
		
</beans>